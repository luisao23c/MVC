<?php
namespace Lib;
class Route{
    
    private static $routes =[];
    public static function get($uri,$callback){
        $uri = trim($uri, '/');
        self::$routes["GET"][$uri] = $callback;
        return new static();

    }
    public static function auth(){

        // base64 encodes the header json
        $arr = array('alg' => 'HS256', 'typ' => 'JWT');
        $arr2 = json_encode($arr);
        $encoded_header = base64_encode($arr2);
        $arr3 = array('country' => 'Venezuela', 'name' => 'Julio Gonzalez', 'email' => 'email@gmail.com');
        $arr33 = json_encode($arr3);
        $encoded_payload = base64_encode($arr33);        
        $header_payload = $encoded_header . '.' . $encoded_payload;
        $secret_key = 'LUISANGELgtzhdz220920008713852692';
        $signature = base64_encode(hash_hmac('sha256', $header_payload, $secret_key, true));
        $jwt_token = $header_payload . '.' . $signature;        
        setcookie("token", $jwt_token, time() +30*24*60*60 );        
        //AQUI VERIFICAMOS LA FIRMA
        
        //Verifying the Signature
        
        $recievedJwt = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJjb3VudHJ5IjoiVmVuZXp1ZWxhIiwibmFtZSI6Ikp1bGlvIEdvbnphbGV6IiwiZW1haWwiOiJlbWFpbEBnbWFpbC5jb20ifQ==.h3tBXSN978DPxKxgJh20mc2DaqSdWuYhKJ9O1iBV6Pk=';
        
        $secret_key = 'clave secreta';
        
        // Split a string by '.' 
        $jwt_values = explode('.', $recievedJwt);
        
        // extracting the signature from the original JWT 
        $recieved_signature = $jwt_values[2];
        
        // concatenating the first two arguments of the $jwt_values array, representing the header and the payload
        $recievedHeaderAndPayload = $jwt_values[0] . '.' . $jwt_values[1];
        
        // creating the Base 64 encoded new signature generated by applying the HMAC method to the concatenated header and payload values
        $resultedsignature = base64_encode(hash_hmac('sha256', $recievedHeaderAndPayload, $secret_key, true));
        
        // checking if the created signature is equal to the received signature
        if($resultedsignature == $recieved_signature) {
        
            // If everything worked fine, if the signature is ok and the payload was not modified you should get a success message
            // echo "Success";
        } else {
        
            // echo "Password no valida";
        
        }
        
        
        
    }
    public static function post($uri,$callback){
        $uri = trim($uri, '/');
        self::$routes["POST"][$uri] = $callback;
        return new static();
    }
    public static function put($uri,$callback){
        $uri = trim($uri, '/');
        self::$routes["PUT"][$uri] = $callback;
        return new static();

    }
    public static function delete($uri,$callback){
        $uri = trim($uri, '/');
        self::$routes["DELETE"][$uri] = $callback;
        return new static();

    }
    public static function dispatch(){
        $uri =$_SERVER["REQUEST_URI"];
        $uri = trim($uri, '/');
        $method =$_SERVER["REQUEST_METHOD"];
        foreach(self::$routes[$method] as $route => $callback){
            if($route == substr($uri, 4)){
                if(is_callable($callback)){ 
                $response =$callback();
                echo $response;
               }
               if(is_array($callback)){
                 $controller = new $callback[0];
                  foreach($callback as $methods=>$function){
                    if($callback[1] ==$function){

                        $data = file_get_contents ('php://input'); 
                        $data = json_decode($data, false);
                        return $controller->$function($data);
                            
                       }
                     
                  }
               }
               return;
            }
        }
        echo "ERROR 404 NOT FOUND";
    }
    
}
?>